services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    container_name: imock-mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-imock}
      MYSQL_USER: ${MYSQL_USER:-imock}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-imockpassword}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./imock-server/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - imock-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      timeout: 20s
      retries: 10

  # 后端服务 - 开发模式
  imock-server-dev:
    build:
      context: ./imock-server
      dockerfile: Dockerfile.dev
    container_name: imock-server-dev
    environment:
      DATABASE_URL: "mysql://${MYSQL_USER:-imock}:${MYSQL_PASSWORD:-imockpassword}@mysql:3306/${MYSQL_DATABASE:-imock}"
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      RUNTIME_ENV: ${RUNTIME_ENV:-development}
      NODE_ENV: development
      STATIC_DIR: "./public"
      ORIGIN: ${ORIGIN:-http://localhost:3010}
      # AI Mock 功能（可选）
      QWEN_API_KEY: ${QWEN_API_KEY}
      # 邮件服务（可选）
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    ports:
      - "${SERVER_PORT:-6060}:6060"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - imock-dev-network
    restart: unless-stopped
    volumes:
      # 挂载源代码以支持热更新
      - ./imock-server/src:/app/src
      - ./imock-server/package.json:/app/package.json
      - ./imock-server/tsconfig.json:/app/tsconfig.json
      - ./imock-server/prisma:/app/prisma
      - ./imock-server/.npmrc:/app/.npmrc
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - server_dev_public:/app/public
      - server_dev_node_modules:/app/node_modules  # 使用 volume 避免权限问题
      - server_dev_dist:/app/dist  # 编译输出目录
    # 开发模式下启用 tty 和 stdin
    tty: true
    stdin_open: true

  # 前端服务 - 开发模式
  imock-web-dev:
    build:
      context: ./imock-web
      dockerfile: Dockerfile.dev
      args:
        # Vite 开发服务器环境变量
        RUNTIME_ENV: ${RUNTIME_ENV:-development}
        MOCK_ENDPOINT: ${MOCK_ENDPOINT:-http://localhost:6060/server/proxy-api}
        SOCKET_URL: ${SOCKET_URL:-http://localhost:6060}
    container_name: imock-web-dev
    environment:
      # Vite 开发服务器配置
      VITE_RUNTIME_ENV: ${RUNTIME_ENV:-development}
      VITE_MOCK_ENDPOINT: ${MOCK_ENDPOINT:-http://localhost:6060/server/proxy-api}
      VITE_SOCKET_URL: ${SOCKET_URL:-http://localhost:6060}
    ports:
      - "${WEB_PORT:-3010}:3010"
    depends_on:
      - imock-server-dev
    networks:
      - imock-dev-network
    restart: unless-stopped
    volumes:
      # 挂载源代码以支持热更新
      - ./imock-web/src:/app/src
      - ./imock-web/public:/app/public
      - ./imock-web/package.json:/app/package.json
      - ./imock-web/tsconfig.json:/app/tsconfig.json
      - ./imock-web/vite.config.mjs:/app/vite.config.mjs
      - ./imock-web/tailwind.config.js:/app/tailwind.config.js
      - ./imock-web/postcss.config.js:/app/postcss.config.js
      - ./imock-web/index.html:/app/index.html
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      - web_dev_node_modules:/app/node_modules  # 使用 volume 避免权限问题
    # 开发模式下启用 tty 和 stdin
    tty: true
    stdin_open: true

volumes:
  mysql_dev_data:
  server_dev_public:
  server_dev_node_modules:
  server_dev_dist:
  web_dev_node_modules:

networks:
  imock-dev-network:
    driver: bridge
